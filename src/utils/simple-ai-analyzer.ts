/**
 * ü§ñ ANALISADOR IA SIMPLIFICADO
 *
 * An√°lise de leads usando regex e l√≥gica JavaScript
 * SEM depend√™ncias externas, SEM CORS, SEM APIs
 *
 * Funcionalidades:
 * - Detecta tipo de im√≥vel
 * - Detecta valor/or√ßamento
 * - Detecta localiza√ß√£o
 * - Detecta urg√™ncia
 * - Calcula score (0-100)
 * - Define prioridade (baixa/media/alta)
 */

export interface SimpleAIAnalysis {
  tipo_imovel: string | null;
  localizacao: string | null;
  valor_estimado: number | null;
  urgencia: 'baixa' | 'media' | 'alta';
  prioridade: 'baixa' | 'media' | 'alta';
  score: number;
  observacoes: string;
}

export class SimpleAIAnalyzer {
  /**
   * Analisa uma mensagem e extrai informa√ß√µes
   */
  static analyze(message: string, senderName: string): SimpleAIAnalysis {
    const msg = message.toLowerCase();

    // Detectar tipo de im√≥vel
    const tipo = this.detectarTipoImovel(msg);

    // Detectar valor
    const valor = this.detectarValor(msg);

    // Detectar localiza√ß√£o
    const localizacao = this.detectarLocalizacao(msg);

    // Detectar urg√™ncia
    const urgencia = this.detectarUrgencia(msg);

    // Calcular score
    const score = this.calcularScore(msg, tipo, valor, localizacao, urgencia);

    // Definir prioridade
    const prioridade = this.definirPrioridade(score, urgencia, valor);

    // Gerar observa√ß√µes
    const observacoes = this.gerarObservacoes(
      tipo,
      valor,
      localizacao,
      urgencia,
      score
    );

    return {
      tipo_imovel: tipo,
      localizacao: localizacao,
      valor_estimado: valor,
      urgencia,
      prioridade,
      score,
      observacoes,
    };
  }

  /**
   * Detecta tipo de im√≥vel na mensagem
   */
  private static detectarTipoImovel(msg: string): string | null {
    const tipos = [
      {
        pattern:
          /\b(ap[o√¥]?|apartamento|ap√™)\b.*?(\d+\s*(quarto|dormit[o√≥]rio|qto))/i,
        tipo: 'Apartamento',
      },
      { pattern: /\b(ap[o√¥]?|apartamento|ap√™)\b/i, tipo: 'Apartamento' },
      {
        pattern: /\b(casa|resid[e√™]ncia)\b.*?(\d+\s*(quarto|dormit[o√≥]rio))/i,
        tipo: 'Casa',
      },
      { pattern: /\bcasa\b/i, tipo: 'Casa' },
      { pattern: /\b(cobertura|duplex|triplex)\b/i, tipo: 'Cobertura' },
      { pattern: /\b(kitnet|kitnete|kit|studio|st√∫dio)\b/i, tipo: 'Kitnet' },
      { pattern: /\b(terreno|lote|ch√°cara|s√≠tio)\b/i, tipo: 'Terreno' },
      {
        pattern: /\b(sala comercial|loja|ponto comercial)\b/i,
        tipo: 'Comercial',
      },
      { pattern: /\b(im[o√≥]vel)\b/i, tipo: 'Im√≥vel' },
    ];

    for (const { pattern, tipo } of tipos) {
      const match = msg.match(pattern);
      if (match) {
        // Se tiver quartos, incluir no tipo
        if (match[2]) {
          return `${tipo} ${match[2].trim()}`;
        }
        return tipo;
      }
    }

    return null;
  }

  /**
   * Detecta valor mencionado na mensagem
   */
  private static detectarValor(msg: string): number | null {
    // Padr√µes: "500 mil", "300k", "R$ 450.000", "at√© 600000"
    const patterns = [
      /\b(\d+)\s*mil(?:h[√£a]o)?\b/i, // 500 mil
      /\b(\d+)\s*k\b/i, // 300k
      /r\$?\s*(\d{3}[.,]?\d{3})/i, // R$ 450.000
      /\b(\d{3,})[.,]?(\d{3})\b/, // 450000 ou 450.000
      /at[e√©]\s*(\d+)/i, // at√© 600
    ];

    for (const pattern of patterns) {
      const match = msg.match(pattern);
      if (match) {
        let valor = parseInt(match[1].replace(/[.,]/g, ''));

        // Converter "mil" ou "k" para milhares
        if (msg.includes('mil') || msg.includes('k')) {
          valor = valor * 1000;
        }

        // Se for menor que 1000, provavelmente s√£o milhares
        if (valor < 1000) {
          valor = valor * 1000;
        }

        return valor;
      }
    }

    return null;
  }

  /**
   * Detecta localiza√ß√£o na mensagem
   */
  private static detectarLocalizacao(msg: string): string | null {
    // Bairros e regi√µes comuns de Goi√¢nia
    const locais = [
      'setor bueno',
      'bueno',
      'setor oeste',
      'oeste',
      'setor marista',
      'marista',
      'jardim goi[a√°]s',
      'setor sul',
      'sul',
      'setor pedro ludovico',
      'jardim am[e√©]rica',
      'centro',
      'campinas',
      'nova su√≠√ßa',
      'vila nova',
      'parque amaz√¥nia',
      'alto da gl[o√≥]ria',
      'setor aeroporto',
      'jardim europa',
      'setor coimbra',
      'eldorado',
    ];

    for (const local of locais) {
      const regex = new RegExp(`\\b${local}\\b`, 'i');
      if (regex.test(msg)) {
        // Capitalizar primeira letra
        return local
          .split(' ')
          .map(word => word.charAt(0).toUpperCase() + word.slice(1))
          .join(' ')
          .replace(/goi[a√°]s/i, 'Goi√°s');
      }
    }

    return null;
  }

  /**
   * Detecta urg√™ncia na mensagem
   */
  private static detectarUrgencia(msg: string): 'baixa' | 'media' | 'alta' {
    const urgentePalavras = [
      'urgente',
      'urg√™ncia',
      'r√°pido',
      'r[a√°]pido',
      'imediato',
      'agora',
      'hoje',
    ];
    const medioPalavras = ['logo', 'breve', 'semana', 'm√™s', 'pr[o√≥]ximo'];

    for (const palavra of urgentePalavras) {
      if (new RegExp(`\\b${palavra}\\b`, 'i').test(msg)) {
        return 'alta';
      }
    }

    for (const palavra of medioPalavras) {
      if (new RegExp(`\\b${palavra}\\b`, 'i').test(msg)) {
        return 'media';
      }
    }

    return 'baixa';
  }

  /**
   * Calcula score do lead (0-100)
   */
  private static calcularScore(
    msg: string,
    tipo: string | null,
    valor: number | null,
    localizacao: string | null,
    urgencia: 'baixa' | 'media' | 'alta'
  ): number {
    let score = 0;

    // Base: mensagem tem conte√∫do (+20)
    if (msg.length > 10) score += 20;

    // Tem tipo de im√≥vel (+25)
    if (tipo) score += 25;

    // Tem valor definido (+25)
    if (valor) score += 25;

    // Tem localiza√ß√£o (+15)
    if (localizacao) score += 15;

    // Urg√™ncia (+5 a +15)
    if (urgencia === 'alta') score += 15;
    else if (urgencia === 'media') score += 10;
    else score += 5;

    // Bonus: mensagem detalhada (+10)
    if (msg.length > 50) score += 10;

    // Bonus: menciona contato (+5)
    if (/\b(contato|ligar|falar|whats|telefone)\b/i.test(msg)) score += 5;

    // Limitar entre 0-100
    return Math.min(100, Math.max(0, score));
  }

  /**
   * Define prioridade baseada em score e outros fatores
   */
  private static definirPrioridade(
    score: number,
    urgencia: 'baixa' | 'media' | 'alta',
    valor: number | null
  ): 'baixa' | 'media' | 'alta' {
    // Urg√™ncia alta = sempre prioridade alta
    if (urgencia === 'alta') return 'alta';

    // Score alto + valor alto = prioridade alta
    if (score >= 70 && valor && valor >= 300000) return 'alta';

    // Score alto = prioridade m√©dia
    if (score >= 60) return 'media';

    // Score m√©dio = prioridade m√©dia
    if (score >= 40) return 'media';

    // Score baixo = prioridade baixa
    return 'baixa';
  }

  /**
   * Gera observa√ß√µes da an√°lise
   */
  private static gerarObservacoes(
    tipo: string | null,
    valor: number | null,
    localizacao: string | null,
    urgencia: 'baixa' | 'media' | 'alta',
    score: number
  ): string {
    const obs: string[] = [];

    if (score >= 70) {
      obs.push('‚úÖ Lead qualificado');
    } else if (score >= 40) {
      obs.push('‚ö†Ô∏è Lead m√©dio');
    } else {
      obs.push('‚ÑπÔ∏è Lead b√°sico');
    }

    if (tipo) obs.push(`Interesse: ${tipo}`);
    if (valor) obs.push(`Or√ßamento: R$ ${valor.toLocaleString('pt-BR')}`);
    if (localizacao) obs.push(`Regi√£o: ${localizacao}`);

    if (urgencia === 'alta') {
      obs.push('üî• URGENTE - Atender imediatamente!');
    } else if (urgencia === 'media') {
      obs.push('‚è∞ Atender em breve');
    }

    return obs.join(' | ');
  }
}




