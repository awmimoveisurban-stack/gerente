import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";
import { AIService } from "../_shared/ai-service.ts";

const EVOLUTION_URL = Deno.env.get('EVOLUTION_API_URL') || 'https://api.urbanautobot.com';

// ‚úÖ Cliente Supabase com service_role (acesso total)
const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
const supabase = createClient(supabaseUrl, supabaseServiceKey);

// ‚úÖ Inicializar servi√ßo de IA
const aiService = new AIService();

console.log('üöÄ Evolution API Polling com IA - Iniciado');

serve(async (req) => {
  try {
    console.log('üì° Polling iniciado...');

    // ‚úÖ 1. BUSCAR TODAS AS INST√ÇNCIAS ATIVAS
    const { data: configs, error: configError } = await supabase
      .from('whatsapp_config')
      .select('*')
      .in('status', ['connected', 'authorized'])
      .is('deleted_at', null)
      .not('evolution_instance_name', 'is', null);

    if (configError) {
      console.error('‚ùå Erro ao buscar configs:', configError);
      return new Response(JSON.stringify({ error: configError.message }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      });
    }

    console.log(`üì± ${configs?.length || 0} inst√¢ncia(s) ativa(s)`);

    let totalMessages = 0;
    let totalLeads = 0;

    // ‚úÖ 2. PROCESSAR CADA INST√ÇNCIA
    for (const config of configs || []) {
      try {
        console.log(`üîç Verificando inst√¢ncia: ${config.evolution_instance_name}`);

        // ‚úÖ 3. BUSCAR MENSAGENS RECEBIDAS
        const fetchUrl = `${EVOLUTION_URL}/message/fetchInstances/${config.evolution_instance_name}?number=false`;
        
        const response = await fetch(fetchUrl, {
          method: 'GET',
          headers: {
            'apikey': config.evolution_instance_token || ''
          }
        });

        if (!response.ok) {
          console.warn(`‚ö†Ô∏è Erro ao buscar mensagens: ${response.status}`);
          continue;
        }

        const messages = await response.json();
        console.log(`üì® ${messages?.length || 0} mensagem(ns) encontrada(s)`);

        // ‚úÖ 4. PROCESSAR CADA MENSAGEM
        for (const msg of messages || []) {
          try {
            // Verificar se √© mensagem recebida (n√£o enviada)
            if (!msg.key?.fromMe && msg.message?.conversation) {
              totalMessages++;
              
              const phoneNumber = msg.key.remoteJid?.replace('@s.whatsapp.net', '') || '';
              const messageText = msg.message.conversation;
              const senderName = msg.pushName || phoneNumber;

              console.log(`üí¨ Mensagem de: ${senderName} (${phoneNumber})`);
              console.log(`üìù Texto: ${messageText}`);

              // ‚úÖ 5. VERIFICAR SE LEAD J√Å EXISTE (evitar duplicatas)
              const { data: existingLead } = await supabase
                .from('leads')
                .select('id')
                .eq('telefone', phoneNumber)
                .maybeSingle();

              if (existingLead) {
                console.log(`‚ÑπÔ∏è Lead j√° existe para ${phoneNumber}, pulando...`);
                continue;
              }

              // ‚úÖ 6. AN√ÅLISE COM IA ü§ñ
              console.log('ü§ñ Analisando com IA...');
              const analysis = await aiService.analyzeMessage(messageText, senderName);
              
              console.log(`üìä Score IA: ${analysis.score}/100`);
              console.log(`üéØ Urg√™ncia: ${analysis.urgencia}`);
              console.log(`üí° Sugest√£o: ${analysis.sugestao_resposta.substring(0, 50)}...`);

              // ‚úÖ 7. CRIAR LEAD COM DADOS DA IA
              const leadData = {
                nome: analysis.nome || senderName,
                telefone: phoneNumber,
                email: null, // WhatsApp n√£o fornece email
                status: 'novo',
                origem: 'whatsapp',
                user_id: config.manager_id,
                imovel_interesse: analysis.tipo_imovel || null,
                valor_interesse: analysis.orcamento || null,
                observacoes: [
                  `üí¨ Mensagem: "${messageText}"`,
                  ``,
                  `ü§ñ AN√ÅLISE IA:`,
                  `Score: ${analysis.score}/100`,
                  `Urg√™ncia: ${analysis.urgencia.toUpperCase()}`,
                  `Inten√ß√£o: ${analysis.intencao}`,
                  analysis.regiao ? `Regi√£o: ${analysis.regiao}` : null,
                  analysis.quartos ? `Quartos: ${analysis.quartos}` : null,
                  ``,
                  `üí° SUGEST√ÉO DE RESPOSTA:`,
                  analysis.sugestao_resposta,
                  ``,
                  `üìä Dados Extra√≠dos:`,
                  analysis.dados_extraidos.tem_nome ? '‚úÖ Nome' : '‚ùå Nome',
                  analysis.dados_extraidos.tem_orcamento ? '‚úÖ Or√ßamento' : '‚ùå Or√ßamento',
                  analysis.dados_extraidos.tem_regiao ? '‚úÖ Regi√£o' : '‚ùå Regi√£o',
                  analysis.dados_extraidos.tem_tipo_imovel ? '‚úÖ Tipo' : '‚ùå Tipo',
                ].filter(Boolean).join('\n'),
              };

              const { data: lead, error: leadError } = await supabase
                .from('leads')
                .insert(leadData)
                .select()
                .single();

              if (leadError) {
                console.error('‚ùå Erro ao criar lead:', leadError);
              } else {
                totalLeads++;
                console.log(`‚úÖ Lead criado com IA: ${lead.id} (Score: ${analysis.score}/100)`);
                
                // ‚úÖ 8. CRIAR NOTIFICA√á√ÉO
                await supabase
                  .from('notifications')
                  .insert({
                    user_id: config.manager_id,
                    title: `üî• Novo Lead ${analysis.score >= 70 ? 'QUENTE' : 'via WhatsApp'}`,
                    message: `${senderName} - Score: ${analysis.score}/100`,
                    type: analysis.score >= 70 ? 'lead_quente' : 'novo_lead',
                    lead_id: lead.id,
                  });
              }
            }
          } catch (msgError) {
            console.error('‚ùå Erro ao processar mensagem:', msgError);
          }
        }

      } catch (instanceError) {
        console.error(`‚ùå Erro na inst√¢ncia ${config.evolution_instance_name}:`, instanceError);
      }
    }

    console.log(`‚úÖ Polling conclu√≠do: ${totalMessages} mensagem(ns), ${totalLeads} lead(s) criado(s)`);

    return new Response(
      JSON.stringify({ 
        success: true, 
        instances: configs?.length || 0,
        messages: totalMessages,
        leads: totalLeads
      }),
      { 
        status: 200,
        headers: { 'Content-Type': 'application/json' }
      }
    );

  } catch (error: any) {
    console.error('‚ùå Erro no polling:', error);
    return new Response(
      JSON.stringify({ error: error.message }),
      { 
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      }
    );
  }
});

