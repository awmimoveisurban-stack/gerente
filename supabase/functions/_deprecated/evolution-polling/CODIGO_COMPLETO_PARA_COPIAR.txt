import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const EVOLUTION_URL = Deno.env.get('EVOLUTION_API_URL') || 'https://api.urbanautobot.com';

// ‚úÖ Cliente Supabase com service_role (acesso total)
const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
const supabase = createClient(supabaseUrl, supabaseServiceKey);

console.log('üöÄ Evolution API Polling - Iniciado');

serve(async (req) => {
  try {
    console.log('üì° Polling iniciado...');

    // ‚úÖ 1. BUSCAR TODAS AS INST√ÇNCIAS ATIVAS
    // Buscar por 'connected' OU 'authorized' (Evolution API usa ambos)
    const { data: configs, error: configError } = await supabase
      .from('whatsapp_config')
      .select('*')
      .in('status', ['connected', 'authorized'])
      .is('deleted_at', null)
      .not('evolution_instance_name', 'is', null);

    if (configError) {
      console.error('‚ùå Erro ao buscar configs:', configError);
      return new Response(JSON.stringify({ error: configError.message }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      });
    }

    console.log(`üì± ${configs?.length || 0} inst√¢ncia(s) ativa(s)`);

    let totalMessages = 0;
    let totalLeads = 0;

    // ‚úÖ 2. PROCESSAR CADA INST√ÇNCIA
    for (const config of configs || []) {
      try {
        console.log(`üîç Verificando inst√¢ncia: ${config.evolution_instance_name}`);

        // ‚úÖ 3. BUSCAR MENSAGENS RECEBIDAS
        const fetchUrl = `${EVOLUTION_URL}/message/receiveNotification/${config.evolution_instance_name}`;
        
        const response = await fetch(fetchUrl, {
          method: 'GET',
          headers: {
            'apikey': config.evolution_instance_token || ''
          }
        });

        if (!response.ok) {
          console.warn(`‚ö†Ô∏è Erro ao buscar mensagens: ${response.status}`);
          continue;
        }

        const notification = await response.json();
        
        if (!notification || !notification.body) {
          console.log(`‚ÑπÔ∏è Sem mensagens para inst√¢ncia ${config.evolution_instance_name}`);
          continue;
        }

        console.log(`üì® Mensagem encontrada`);

        // ‚úÖ 4. PROCESSAR MENSAGEM
        try {
          const msg = notification.body;
          
          // Verificar se √© mensagem recebida (n√£o enviada)
          if (!msg.key?.fromMe && msg.message?.conversation) {
            totalMessages++;
            
            const phoneNumber = msg.key.remoteJid?.replace('@s.whatsapp.net', '') || '';
            const messageText = msg.message.conversation;
            const senderName = msg.pushName || phoneNumber;

            console.log(`üí¨ Mensagem de: ${senderName} (${phoneNumber})`);
            console.log(`üìù Texto: ${messageText}`);

            // ‚úÖ 5. AN√ÅLISE B√ÅSICA
            const score = messageText.toLowerCase().includes('urgente') ? 85 : 
                         messageText.toLowerCase().includes('quero') ? 70 : 50;

            // ‚úÖ 6. CRIAR LEAD
            const { data: lead, error: leadError } = await supabase
              .from('leads')
              .insert({
                nome: senderName,
                telefone: phoneNumber,
                mensagem_inicial: messageText,
                origem: 'whatsapp',
                status: 'novo',
                score: score,
                manager_id: config.manager_id,
                atribuido_a: config.manager_id,
              })
              .select()
              .single();

            if (leadError) {
              console.error('‚ùå Erro ao criar lead:', leadError);
            } else {
              totalLeads++;
              console.log(`‚úÖ Lead criado: ${lead.id}`);
              
              // ‚úÖ 7. DELETAR MENSAGEM DA FILA
              await fetch(`${EVOLUTION_URL}/message/deleteNotification/${config.evolution_instance_name}/${notification.receiptId}`, {
                method: 'DELETE',
                headers: { 'apikey': config.evolution_instance_token || '' }
              });
            }
          }
        } catch (msgError) {
          console.error('‚ùå Erro ao processar mensagem:', msgError);
        }

      } catch (instanceError) {
        console.error(`‚ùå Erro na inst√¢ncia ${config.evolution_instance_name}:`, instanceError);
      }
    }

    console.log(`‚úÖ Polling conclu√≠do: ${totalMessages} mensagem(ns), ${totalLeads} lead(s) criado(s)`);

    return new Response(
      JSON.stringify({ 
        success: true, 
        instances: configs?.length || 0,
        messages: totalMessages,
        leads: totalLeads
      }),
      { 
        status: 200,
        headers: { 'Content-Type': 'application/json' }
      }
    );

  } catch (error: any) {
    console.error('‚ùå Erro no polling:', error);
    return new Response(
      JSON.stringify({ error: error.message }),
      { 
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      }
    );
  }
});

