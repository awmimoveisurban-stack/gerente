// üîç SCRIPT DE DIAGN√ìSTICO PARA P√ÅGINAS EM BRANCO
// Execute este script no console do navegador para identificar problemas

async function diagnoseBlankPages() {
  console.log('üîç DIAGN√ìSTICO DE P√ÅGINAS EM BRANCO');
  console.log('===================================');

  try {
    // 1. Verificar erros no console
    console.log('\n1. üìã VERIFICANDO ERROS NO CONSOLE...');
    
    // Capturar erros JavaScript
    const originalError = console.error;
    const errors = [];
    console.error = function(...args) {
      errors.push(args.join(' '));
      originalError.apply(console, args);
    };

    // 2. Verificar se supabase est√° carregado
    console.log('\n2. üóÑÔ∏è VERIFICANDO SUPABASE...');
    
    if (typeof supabase === 'undefined') {
      console.error('‚ùå Supabase n√£o est√° carregado!');
      console.log('üí° Solu√ß√£o: Verifique se o script est√° sendo carregado corretamente.');
      return;
    }
    console.log('‚úÖ Supabase carregado');

    // 3. Verificar autentica√ß√£o
    console.log('\n3. üîê VERIFICANDO AUTENTICA√á√ÉO...');
    
    const { data: { session }, error: authError } = await supabase.auth.getSession();
    
    if (authError) {
      console.error('‚ùå Erro na autentica√ß√£o:', authError);
      console.log('üí° Solu√ß√£o: Verifique as configura√ß√µes do Supabase.');
      return;
    }

    if (!session) {
      console.log('‚ö†Ô∏è Usu√°rio n√£o autenticado');
      console.log('üí° Solu√ß√£o: Fa√ßa login primeiro.');
      return;
    }
    
    console.log('‚úÖ Usu√°rio autenticado:', session.user.email);

    // 4. Verificar tabelas do banco
    console.log('\n4. üóÇÔ∏è VERIFICANDO TABELAS DO BANCO...');
    
    const tables = ['profiles', 'user_roles', 'leads'];
    
    for (const table of tables) {
      try {
        const { data, error } = await supabase
          .from(table)
          .select('*')
          .limit(1);

        if (error) {
          console.error(`‚ùå Erro na tabela ${table}:`, error);
          console.log(`üí° Solu√ß√£o: Verifique se a tabela ${table} existe e tem as pol√≠ticas RLS corretas.`);
        } else {
          console.log(`‚úÖ Tabela ${table} funcionando`);
        }
      } catch (err) {
        console.error(`‚ùå Erro ao acessar tabela ${table}:`, err);
      }
    }

    // 5. Verificar roles do usu√°rio
    console.log('\n5. üë§ VERIFICANDO ROLES DO USU√ÅRIO...');
    
    const { data: roles, error: rolesError } = await supabase
      .from('user_roles')
      .select('*')
      .eq('user_id', session.user.id);

    if (rolesError) {
      console.error('‚ùå Erro ao buscar roles:', rolesError);
      console.log('üí° Solu√ß√£o: Execute o SQL para criar a tabela user_roles e inserir o role do usu√°rio.');
    } else if (!roles || roles.length === 0) {
      console.error('‚ùå Usu√°rio n√£o tem roles definidos!');
      console.log('üí° Solu√ß√£o: Execute o SQL para inserir o role do usu√°rio na tabela user_roles.');
    } else {
      console.log('‚úÖ Roles encontrados:', roles);
    }

    // 6. Verificar perfil do usu√°rio
    console.log('\n6. üìÑ VERIFICANDO PERFIL DO USU√ÅRIO...');
    
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', session.user.id)
      .single();

    if (profileError) {
      console.error('‚ùå Erro ao buscar perfil:', profileError);
      console.log('üí° Solu√ß√£o: Execute o SQL para criar/atualizar a tabela profiles.');
    } else {
      console.log('‚úÖ Perfil encontrado:', profile);
    }

    // 7. Verificar elementos da p√°gina
    console.log('\n7. üé® VERIFICANDO ELEMENTOS DA P√ÅGINA...');
    
    const currentPath = window.location.pathname;
    console.log('üìç P√°gina atual:', currentPath);

    // Verificar se h√° conte√∫do na p√°gina
    const bodyContent = document.body.textContent?.trim();
    if (!bodyContent || bodyContent.length < 100) {
      console.error('‚ùå P√°gina parece estar em branco ou com pouco conte√∫do!');
      console.log('üí° Solu√ß√£o: Verifique se h√° erros JavaScript que impedem o carregamento.');
    } else {
      console.log('‚úÖ P√°gina tem conte√∫do');
    }

    // Verificar elementos espec√≠ficos
    const sidebar = document.querySelector('[data-sidebar="sidebar"]');
    const header = document.querySelector('header');
    const main = document.querySelector('main');

    console.log(`üìã Sidebar: ${sidebar ? 'Encontrada' : 'N√£o encontrada'}`);
    console.log(`üìã Header: ${header ? 'Encontrado' : 'N√£o encontrado'}`);
    console.log(`üìã Main: ${main ? 'Encontrado' : 'N√£o encontrado'}`);

    // 8. Verificar React DevTools
    console.log('\n8. ‚öõÔ∏è VERIFICANDO REACT...');
    
    if (window.__REACT_DEVTOOLS_GLOBAL_HOOK__) {
      console.log('‚úÖ React DevTools detectado');
      
      // Verificar se h√° componentes React renderizados
      const reactRoot = document.querySelector('#root');
      if (reactRoot && reactRoot.children.length > 0) {
        console.log('‚úÖ React est√° renderizando componentes');
      } else {
        console.error('‚ùå React n√£o est√° renderizando componentes!');
        console.log('üí° Solu√ß√£o: Verifique se h√° erros no c√≥digo React.');
      }
    } else {
      console.log('‚ö†Ô∏è React DevTools n√£o detectado (normal em produ√ß√£o)');
    }

    // 9. Verificar network requests
    console.log('\n9. üåê VERIFICANDO REQUESTS DE REDE...');
    
    // Verificar se h√° requests falhando
    const failedRequests = performance.getEntriesByType('resource')
      .filter(entry => entry.name.includes('supabase'))
      .filter(entry => entry.responseEnd === 0);

    if (failedRequests.length > 0) {
      console.error('‚ùå Requests falhando:', failedRequests);
      console.log('üí° Solu√ß√£o: Verifique a conex√£o com o Supabase.');
    } else {
      console.log('‚úÖ Requests de rede funcionando');
    }

    // 10. Resumo e solu√ß√µes
    console.log('\n10. üìä RESUMO E SOLU√á√ïES:');
    console.log('========================');
    
    if (errors.length > 0) {
      console.log('‚ùå ERROS ENCONTRADOS:');
      errors.forEach(error => console.log(`  - ${error}`));
    }

    console.log('\nüîß SOLU√á√ïES RECOMENDADAS:');
    console.log('1. Se h√° erros de tabela: Execute os scripts SQL no Supabase Dashboard');
    console.log('2. Se h√° erros de role: Execute o script create-user-roles-table.sql');
    console.log('3. Se h√° erros de perfil: Execute o script fix-profiles-table.sql');
    console.log('4. Se a p√°gina est√° em branco: Verifique o console para erros JavaScript');
    console.log('5. Se h√° problemas de rede: Verifique as configura√ß√µes do Supabase');

    // Restaurar console.error original
    console.error = originalError;

  } catch (error) {
    console.error('‚ùå Erro durante o diagn√≥stico:', error);
  }
}

// Executar o diagn√≥stico
diagnoseBlankPages();





